<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Stickman + Music</title>
  <style>
    :root{--bg:#0f1724;--card:#0b1220;--accent:#60a5fa}
    html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial}
    body{background:linear-gradient(180deg,var(--bg),#08101a);color:#dbeafe;display:flex;align-items:center;justify-content:center}
    .panel{width:980px;max-width:96%;background:rgba(255,255,255,0.03);padding:18px;border-radius:12px;box-shadow:0 6px 30px rgba(2,6,23,0.6)}
    h1{margin:0 0 8px;font-size:20px}
    p{margin:6px 0 14px;color:#9fb4d6}

    .controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
    .controls label{background:#0b1220;padding:8px 10px;border-radius:8px;cursor:pointer;border:1px solid rgba(255,255,255,0.03)}
    input[type=file]{display:none}
    button{background:var(--accent);border:0;padding:8px 12px;border-radius:8px;color:#07203a;cursor:pointer;font-weight:600}
    .small{font-size:13px;padding:6px 8px}

    .stage{height:420px;background:linear-gradient(180deg,rgba(255,255,255,0.02),transparent);margin-top:16px;border-radius:10px;display:grid;place-items:center}

    /* stickman layout */
    .stickwrap{width:260px;height:340px;display:grid;place-items:center}
    svg{overflow:visible}

    /* subtle idle animation */
    .bob{animation:bob 1.7s ease-in-out infinite}
    @keyframes bob{0%{transform:translateY(0)}50%{transform:translateY(-6px)}100%{transform:translateY(0)}}

    /* arms/legs swing when audio plays; we'll toggle .dancing */
    .dancing .upper-arm-left,
    .dancing .upper-arm-right{transform-origin:15px 10px}

    .dancing .upper-arm-left{animation:arm-left 0.6s ease-in-out infinite}
    .dancing .upper-arm-right{animation:arm-right 0.6s ease-in-out infinite}
    .dancing .leg-left{animation:leg-left 0.6s ease-in-out infinite}
    .dancing .leg-right{animation:leg-right 0.6s ease-in-out infinite}

    @keyframes arm-left{0%{transform:rotate(12deg)}50%{transform:rotate(-18deg)}100%{transform:rotate(12deg)}}
    @keyframes arm-right{0%{transform:rotate(-12deg)}50%{transform:rotate(18deg)}100%{transform:rotate(-12deg)}}
    @keyframes leg-left{0%{transform:rotate(10deg)}50%{transform:rotate(-18deg)}100%{transform:rotate(10deg)}}
    @keyframes leg-right{0%{transform:rotate(-6deg)}50%{transform:rotate(22deg)}100%{transform:rotate(-6deg)}}

    .meter{height:6px;border-radius:6px;background:rgba(255,255,255,0.06);overflow:hidden;margin-left:8px;flex:1}
    .meter > i{display:block;height:100%;width:0%;background:linear-gradient(90deg,rgba(96,165,250,0.2),rgba(96,165,250,0.95));transition:width 0.06s linear}

    .footer{color:#8eaed9;font-size:13px;margin-top:12px}

    /* responsive */
    @media (max-width:520px){.panel{padding:12px}.stickwrap{width:200px;height:260px}}
  </style>
</head>
<body>
  <div class="panel">
    <h1>Stickman animator — play your music</h1>
    <p>Load an audio file (MP3/AAC/OGG) from your computer and press Play. <strong>Note:</strong> I can't provide copyrighted songs — load your own copy of "The Man Who Can't Be Moved" if you own it, or use any other audio file.</p>

    <div class="controls">
      <label for="file">Choose audio file</label>
      <input id="file" type="file" accept="audio/*">
      <button id="play" class="small">Play</button>
      <button id="pause" class="small">Pause</button>
      <button id="stop" class="small">Stop</button>
      <div class="meter" title="audio level"><i id="level"></i></div>
    </div>

    <div class="stage">
      <div class="stickwrap" id="stickwrap">
        <!-- SVG stickman -->
        <svg id="stickman" viewBox="-60 -20 200 360" width="260" height="340">
          <!-- head -->
          <g id="head" transform="translate(50,40)">
            <circle cx="0" cy="0" r="22" fill="#f8fafc" stroke="#0b1220" stroke-width="2" />
            <circle cx="-7" cy="-4" r="2.2" fill="#0b1220" />
            <circle cx="7" cy="-4" r="2.2" fill="#0b1220" />
            <path d="M -7 7 q7 6 14 0" fill="none" stroke="#0b1220" stroke-width="1.6" stroke-linecap="round" />
          </g>

          <!-- body -->
          <g id="torso" transform="translate(50,62)">
            <line x1="0" y1="0" x2="0" y2="90" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />

            <!-- left arm -->
            <g class="upper-arm-left" transform="translate(0,20)">
              <line x1="0" y1="0" x2="-36" y2="22" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
              <line class="lower-arm-left" x1="-36" y1="22" x2="-62" y2="6" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
            </g>
            <!-- right arm -->
            <g class="upper-arm-right" transform="translate(0,20)">
              <line x1="0" y1="0" x2="36" y2="22" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
              <line class="lower-arm-right" x1="36" y1="22" x2="62" y2="6" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
            </g>

            <!-- legs -->
            <g transform="translate(0,90)">
              <line class="leg-left" x1="0" y1="0" x2="-28" y2="64" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
              <line class="leg-right" x1="0" y1="0" x2="28" y2="64" stroke="#f8fafc" stroke-width="4" stroke-linecap="round" />
            </g>
          </g>
        </svg>
      </div>
    </div>

    <div class="footer">
      Tip: if you have the song file, choose it with the <em>Choose audio file</em> button. The page does all audio processing locally — nothing is uploaded.
    </div>
  </div>

<script>
  // Elements
  const fileInput = document.getElementById('file');
  const playBtn = document.getElementById('play');
  const pauseBtn = document.getElementById('pause');
  const stopBtn = document.getElementById('stop');
  const levelBar = document.getElementById('level');
  const stickwrap = document.getElementById('stickwrap');
  const head = document.getElementById('head');

  let audioCtx = null;
  let sourceNode = null;
  let analyser = null;
  let dataArray = null;
  let audioElement = new Audio();
  audioElement.crossOrigin = 'anonymous';
  audioElement.loop = false;

  function setupAudioNodes() {
    if (audioCtx) return;
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    analyser = audioCtx.createAnalyser();
    analyser.fftSize = 256;
    const bufferLength = analyser.frequencyBinCount;
    dataArray = new Uint8Array(bufferLength);
    sourceNode = audioCtx.createMediaElementSource(audioElement);
    sourceNode.connect(analyser);
    analyser.connect(audioCtx.destination);
    tick();
  }

  // Visualiser tick
  function tick() {
    if (!analyser) return;
    requestAnimationFrame(tick);
    analyser.getByteFrequencyData(dataArray);
    // compute smooth average
    let sum = 0;
    for (let i = 0; i < dataArray.length; i++) sum += dataArray[i];
    const avg = sum / dataArray.length; // 0-255
    // map avg to 0-100% meter
    const pct = Math.min(100, Math.round((avg / 255) * 100));
    levelBar.style.width = pct + '%';

    // Map avg to stickman animation intensity
    const intensity = avg / 255; // 0..1
    // head bob scale
    const bobScale = 1 + intensity * 0.12; // slight scale on head
    head.setAttribute('transform', `translate(50,${40 - intensity*6}) scale(${bobScale})`);

    // toggle dancing class if loud enough
    if (avg > 30) {
      stickwrap.classList.add('dancing');
    } else {
      stickwrap.classList.remove('dancing');
    }
  }

  // Hook file input
  fileInput.addEventListener('change', (e)=>{
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    const url = URL.createObjectURL(f);
    audioElement.src = url;
    setupAudioNodes();
    audioElement.play();
    if (audioCtx && audioCtx.state === 'suspended') audioCtx.resume();
  });

  playBtn.addEventListener('click', async ()=>{
    if (!audioElement.src) {
      alert('No audio selected. Choose a file first.');
      return;
    }
    setupAudioNodes();
    await audioElement.play();
    if (audioCtx && audioCtx.state === 'suspended') await audioCtx.resume();
  });
  pauseBtn.addEventListener('click', ()=>{audioElement.pause();});
  stopBtn.addEventListener('click', ()=>{audioElement.pause();audioElement.currentTime = 0;});

  // allow drag-and-drop onto stage
  const stage = document.querySelector('.stage');
  ['dragenter','dragover','dragleave','drop'].forEach(evt=>{
    stage.addEventListener(evt,(e)=>{e.preventDefault();e.stopPropagation();});
  });
  stage.addEventListener('drop',(e)=>{
    const f = e.dataTransfer.files && e.dataTransfer.files[0];
    if (!f) return;
    fileInput.files = e.dataTransfer.files;
    const ev = new Event('change'); fileInput.dispatchEvent(ev);
  });

  // make the stickman gently bob by default
  stickwrap.classList.add('bob');
</script>
</body>
</html>
